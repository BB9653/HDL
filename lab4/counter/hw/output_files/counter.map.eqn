-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--B1_sum[0] is generic_adder_beh:uut_adder|sum[0]
B1_sum[0]_adder_eqn = ( !sum_sig_signal[0] $ (!input[0]) ) + ( !VCC ) + ( !VCC );
B1_sum[0] = SUM(B1_sum[0]_adder_eqn);

--B1L2 is generic_adder_beh:uut_adder|_~1
B1L2_adder_eqn = ( !sum_sig_signal[0] $ (!input[0]) ) + ( !VCC ) + ( !VCC );
B1L2 = CARRY(B1L2_adder_eqn);

--B1L3 is generic_adder_beh:uut_adder|_~2
B1L3_share_eqn = (sum_sig_signal[0] & input[0]);
B1L3 = SHARE(B1L3_share_eqn);


--B1_sum[1] is generic_adder_beh:uut_adder|sum[1]
B1_sum[1]_adder_eqn = ( !sum_sig_signal[1] $ (!input[1]) ) + ( B1L3 ) + ( B1L2 );
B1_sum[1] = SUM(B1_sum[1]_adder_eqn);

--B1L5 is generic_adder_beh:uut_adder|_~4
B1L5_adder_eqn = ( !sum_sig_signal[1] $ (!input[1]) ) + ( B1L3 ) + ( B1L2 );
B1L5 = CARRY(B1L5_adder_eqn);

--B1L6 is generic_adder_beh:uut_adder|_~5
B1L6_share_eqn = (sum_sig_signal[1] & input[1]);
B1L6 = SHARE(B1L6_share_eqn);


--B1_sum[2] is generic_adder_beh:uut_adder|sum[2]
B1_sum[2]_adder_eqn = ( !sum_sig_signal[2] $ (!input[2]) ) + ( B1L6 ) + ( B1L5 );
B1_sum[2] = SUM(B1_sum[2]_adder_eqn);

--B1L8 is generic_adder_beh:uut_adder|_~7
B1L8_adder_eqn = ( !sum_sig_signal[2] $ (!input[2]) ) + ( B1L6 ) + ( B1L5 );
B1L8 = CARRY(B1L8_adder_eqn);

--B1L9 is generic_adder_beh:uut_adder|_~8
B1L9_share_eqn = (sum_sig_signal[2] & input[2]);
B1L9 = SHARE(B1L9_share_eqn);


--B1_sum[3] is generic_adder_beh:uut_adder|sum[3]
B1_sum[3]_adder_eqn = ( !sum_sig_signal[3] $ (!input[3]) ) + ( B1L9 ) + ( B1L8 );
B1_sum[3] = SUM(B1_sum[3]_adder_eqn);


--C1_count_sig[1] is generic_counter:uut_counter|count_sig[1]
--register power-up is low

C1_count_sig[1] = DFFEAS(C1L2, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[0] is generic_counter:uut_counter|count_sig[0]
--register power-up is low

C1_count_sig[0] = DFFEAS(C1L6, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[25] is generic_counter:uut_counter|count_sig[25]
--register power-up is low

C1_count_sig[25] = DFFEAS(C1L10, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[24] is generic_counter:uut_counter|count_sig[24]
--register power-up is low

C1_count_sig[24] = DFFEAS(C1L14, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[23] is generic_counter:uut_counter|count_sig[23]
--register power-up is low

C1_count_sig[23] = DFFEAS(C1L18, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[22] is generic_counter:uut_counter|count_sig[22]
--register power-up is low

C1_count_sig[22] = DFFEAS(C1L22, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[21] is generic_counter:uut_counter|count_sig[21]
--register power-up is low

C1_count_sig[21] = DFFEAS(C1L26, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[20] is generic_counter:uut_counter|count_sig[20]
--register power-up is low

C1_count_sig[20] = DFFEAS(C1L30, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[19] is generic_counter:uut_counter|count_sig[19]
--register power-up is low

C1_count_sig[19] = DFFEAS(C1L34, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[18] is generic_counter:uut_counter|count_sig[18]
--register power-up is low

C1_count_sig[18] = DFFEAS(C1L38, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[17] is generic_counter:uut_counter|count_sig[17]
--register power-up is low

C1_count_sig[17] = DFFEAS(C1L42, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[16] is generic_counter:uut_counter|count_sig[16]
--register power-up is low

C1_count_sig[16] = DFFEAS(C1L46, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[15] is generic_counter:uut_counter|count_sig[15]
--register power-up is low

C1_count_sig[15] = DFFEAS(C1L50, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[14] is generic_counter:uut_counter|count_sig[14]
--register power-up is low

C1_count_sig[14] = DFFEAS(C1L54, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[13] is generic_counter:uut_counter|count_sig[13]
--register power-up is low

C1_count_sig[13] = DFFEAS(C1L58, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[12] is generic_counter:uut_counter|count_sig[12]
--register power-up is low

C1_count_sig[12] = DFFEAS(C1L62, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[11] is generic_counter:uut_counter|count_sig[11]
--register power-up is low

C1_count_sig[11] = DFFEAS(C1L66, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[10] is generic_counter:uut_counter|count_sig[10]
--register power-up is low

C1_count_sig[10] = DFFEAS(C1L70, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[9] is generic_counter:uut_counter|count_sig[9]
--register power-up is low

C1_count_sig[9] = DFFEAS(C1L74, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[8] is generic_counter:uut_counter|count_sig[8]
--register power-up is low

C1_count_sig[8] = DFFEAS(C1L78, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[7] is generic_counter:uut_counter|count_sig[7]
--register power-up is low

C1_count_sig[7] = DFFEAS(C1L82, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[6] is generic_counter:uut_counter|count_sig[6]
--register power-up is low

C1_count_sig[6] = DFFEAS(C1L86, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[5] is generic_counter:uut_counter|count_sig[5]
--register power-up is low

C1_count_sig[5] = DFFEAS(C1L90, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[4] is generic_counter:uut_counter|count_sig[4]
--register power-up is low

C1_count_sig[4] = DFFEAS(C1L94, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[3] is generic_counter:uut_counter|count_sig[3]
--register power-up is low

C1_count_sig[3] = DFFEAS(C1L98, clk, reset,  ,  ,  ,  , C1L136,  );


--C1_count_sig[2] is generic_counter:uut_counter|count_sig[2]
--register power-up is low

C1_count_sig[2] = DFFEAS(C1L102, clk, reset,  ,  ,  ,  , C1L136,  );


--C1L2 is generic_counter:uut_counter|Add0~1
C1L2_adder_eqn = ( C1_count_sig[1] ) + ( GND ) + ( C1L7 );
C1L2 = SUM(C1L2_adder_eqn);

--C1L3 is generic_counter:uut_counter|Add0~2
C1L3_adder_eqn = ( C1_count_sig[1] ) + ( GND ) + ( C1L7 );
C1L3 = CARRY(C1L3_adder_eqn);


--C1L6 is generic_counter:uut_counter|Add0~5
C1L6_adder_eqn = ( C1_count_sig[0] ) + ( VCC ) + ( !VCC );
C1L6 = SUM(C1L6_adder_eqn);

--C1L7 is generic_counter:uut_counter|Add0~6
C1L7_adder_eqn = ( C1_count_sig[0] ) + ( VCC ) + ( !VCC );
C1L7 = CARRY(C1L7_adder_eqn);


--C1L10 is generic_counter:uut_counter|Add0~9
C1L10_adder_eqn = ( C1_count_sig[25] ) + ( GND ) + ( C1L15 );
C1L10 = SUM(C1L10_adder_eqn);


--C1L14 is generic_counter:uut_counter|Add0~13
C1L14_adder_eqn = ( C1_count_sig[24] ) + ( GND ) + ( C1L19 );
C1L14 = SUM(C1L14_adder_eqn);

--C1L15 is generic_counter:uut_counter|Add0~14
C1L15_adder_eqn = ( C1_count_sig[24] ) + ( GND ) + ( C1L19 );
C1L15 = CARRY(C1L15_adder_eqn);


--C1L18 is generic_counter:uut_counter|Add0~17
C1L18_adder_eqn = ( C1_count_sig[23] ) + ( GND ) + ( C1L23 );
C1L18 = SUM(C1L18_adder_eqn);

--C1L19 is generic_counter:uut_counter|Add0~18
C1L19_adder_eqn = ( C1_count_sig[23] ) + ( GND ) + ( C1L23 );
C1L19 = CARRY(C1L19_adder_eqn);


--C1L22 is generic_counter:uut_counter|Add0~21
C1L22_adder_eqn = ( C1_count_sig[22] ) + ( GND ) + ( C1L27 );
C1L22 = SUM(C1L22_adder_eqn);

--C1L23 is generic_counter:uut_counter|Add0~22
C1L23_adder_eqn = ( C1_count_sig[22] ) + ( GND ) + ( C1L27 );
C1L23 = CARRY(C1L23_adder_eqn);


--C1L26 is generic_counter:uut_counter|Add0~25
C1L26_adder_eqn = ( C1_count_sig[21] ) + ( GND ) + ( C1L31 );
C1L26 = SUM(C1L26_adder_eqn);

--C1L27 is generic_counter:uut_counter|Add0~26
C1L27_adder_eqn = ( C1_count_sig[21] ) + ( GND ) + ( C1L31 );
C1L27 = CARRY(C1L27_adder_eqn);


--C1L30 is generic_counter:uut_counter|Add0~29
C1L30_adder_eqn = ( C1_count_sig[20] ) + ( GND ) + ( C1L35 );
C1L30 = SUM(C1L30_adder_eqn);

--C1L31 is generic_counter:uut_counter|Add0~30
C1L31_adder_eqn = ( C1_count_sig[20] ) + ( GND ) + ( C1L35 );
C1L31 = CARRY(C1L31_adder_eqn);


--C1L34 is generic_counter:uut_counter|Add0~33
C1L34_adder_eqn = ( C1_count_sig[19] ) + ( GND ) + ( C1L39 );
C1L34 = SUM(C1L34_adder_eqn);

--C1L35 is generic_counter:uut_counter|Add0~34
C1L35_adder_eqn = ( C1_count_sig[19] ) + ( GND ) + ( C1L39 );
C1L35 = CARRY(C1L35_adder_eqn);


--C1L38 is generic_counter:uut_counter|Add0~37
C1L38_adder_eqn = ( C1_count_sig[18] ) + ( GND ) + ( C1L43 );
C1L38 = SUM(C1L38_adder_eqn);

--C1L39 is generic_counter:uut_counter|Add0~38
C1L39_adder_eqn = ( C1_count_sig[18] ) + ( GND ) + ( C1L43 );
C1L39 = CARRY(C1L39_adder_eqn);


--C1L42 is generic_counter:uut_counter|Add0~41
C1L42_adder_eqn = ( C1_count_sig[17] ) + ( GND ) + ( C1L47 );
C1L42 = SUM(C1L42_adder_eqn);

--C1L43 is generic_counter:uut_counter|Add0~42
C1L43_adder_eqn = ( C1_count_sig[17] ) + ( GND ) + ( C1L47 );
C1L43 = CARRY(C1L43_adder_eqn);


--C1L46 is generic_counter:uut_counter|Add0~45
C1L46_adder_eqn = ( C1_count_sig[16] ) + ( GND ) + ( C1L51 );
C1L46 = SUM(C1L46_adder_eqn);

--C1L47 is generic_counter:uut_counter|Add0~46
C1L47_adder_eqn = ( C1_count_sig[16] ) + ( GND ) + ( C1L51 );
C1L47 = CARRY(C1L47_adder_eqn);


--C1L50 is generic_counter:uut_counter|Add0~49
C1L50_adder_eqn = ( C1_count_sig[15] ) + ( GND ) + ( C1L55 );
C1L50 = SUM(C1L50_adder_eqn);

--C1L51 is generic_counter:uut_counter|Add0~50
C1L51_adder_eqn = ( C1_count_sig[15] ) + ( GND ) + ( C1L55 );
C1L51 = CARRY(C1L51_adder_eqn);


--C1L54 is generic_counter:uut_counter|Add0~53
C1L54_adder_eqn = ( C1_count_sig[14] ) + ( GND ) + ( C1L59 );
C1L54 = SUM(C1L54_adder_eqn);

--C1L55 is generic_counter:uut_counter|Add0~54
C1L55_adder_eqn = ( C1_count_sig[14] ) + ( GND ) + ( C1L59 );
C1L55 = CARRY(C1L55_adder_eqn);


--C1L58 is generic_counter:uut_counter|Add0~57
C1L58_adder_eqn = ( C1_count_sig[13] ) + ( GND ) + ( C1L63 );
C1L58 = SUM(C1L58_adder_eqn);

--C1L59 is generic_counter:uut_counter|Add0~58
C1L59_adder_eqn = ( C1_count_sig[13] ) + ( GND ) + ( C1L63 );
C1L59 = CARRY(C1L59_adder_eqn);


--C1L62 is generic_counter:uut_counter|Add0~61
C1L62_adder_eqn = ( C1_count_sig[12] ) + ( GND ) + ( C1L67 );
C1L62 = SUM(C1L62_adder_eqn);

--C1L63 is generic_counter:uut_counter|Add0~62
C1L63_adder_eqn = ( C1_count_sig[12] ) + ( GND ) + ( C1L67 );
C1L63 = CARRY(C1L63_adder_eqn);


--C1L66 is generic_counter:uut_counter|Add0~65
C1L66_adder_eqn = ( C1_count_sig[11] ) + ( GND ) + ( C1L71 );
C1L66 = SUM(C1L66_adder_eqn);

--C1L67 is generic_counter:uut_counter|Add0~66
C1L67_adder_eqn = ( C1_count_sig[11] ) + ( GND ) + ( C1L71 );
C1L67 = CARRY(C1L67_adder_eqn);


--C1L70 is generic_counter:uut_counter|Add0~69
C1L70_adder_eqn = ( C1_count_sig[10] ) + ( GND ) + ( C1L75 );
C1L70 = SUM(C1L70_adder_eqn);

--C1L71 is generic_counter:uut_counter|Add0~70
C1L71_adder_eqn = ( C1_count_sig[10] ) + ( GND ) + ( C1L75 );
C1L71 = CARRY(C1L71_adder_eqn);


--C1L74 is generic_counter:uut_counter|Add0~73
C1L74_adder_eqn = ( C1_count_sig[9] ) + ( GND ) + ( C1L79 );
C1L74 = SUM(C1L74_adder_eqn);

--C1L75 is generic_counter:uut_counter|Add0~74
C1L75_adder_eqn = ( C1_count_sig[9] ) + ( GND ) + ( C1L79 );
C1L75 = CARRY(C1L75_adder_eqn);


--C1L78 is generic_counter:uut_counter|Add0~77
C1L78_adder_eqn = ( C1_count_sig[8] ) + ( GND ) + ( C1L83 );
C1L78 = SUM(C1L78_adder_eqn);

--C1L79 is generic_counter:uut_counter|Add0~78
C1L79_adder_eqn = ( C1_count_sig[8] ) + ( GND ) + ( C1L83 );
C1L79 = CARRY(C1L79_adder_eqn);


--C1L82 is generic_counter:uut_counter|Add0~81
C1L82_adder_eqn = ( C1_count_sig[7] ) + ( GND ) + ( C1L87 );
C1L82 = SUM(C1L82_adder_eqn);

--C1L83 is generic_counter:uut_counter|Add0~82
C1L83_adder_eqn = ( C1_count_sig[7] ) + ( GND ) + ( C1L87 );
C1L83 = CARRY(C1L83_adder_eqn);


--C1L86 is generic_counter:uut_counter|Add0~85
C1L86_adder_eqn = ( C1_count_sig[6] ) + ( GND ) + ( C1L91 );
C1L86 = SUM(C1L86_adder_eqn);

--C1L87 is generic_counter:uut_counter|Add0~86
C1L87_adder_eqn = ( C1_count_sig[6] ) + ( GND ) + ( C1L91 );
C1L87 = CARRY(C1L87_adder_eqn);


--C1L90 is generic_counter:uut_counter|Add0~89
C1L90_adder_eqn = ( C1_count_sig[5] ) + ( GND ) + ( C1L95 );
C1L90 = SUM(C1L90_adder_eqn);

--C1L91 is generic_counter:uut_counter|Add0~90
C1L91_adder_eqn = ( C1_count_sig[5] ) + ( GND ) + ( C1L95 );
C1L91 = CARRY(C1L91_adder_eqn);


--C1L94 is generic_counter:uut_counter|Add0~93
C1L94_adder_eqn = ( C1_count_sig[4] ) + ( GND ) + ( C1L99 );
C1L94 = SUM(C1L94_adder_eqn);

--C1L95 is generic_counter:uut_counter|Add0~94
C1L95_adder_eqn = ( C1_count_sig[4] ) + ( GND ) + ( C1L99 );
C1L95 = CARRY(C1L95_adder_eqn);


--C1L98 is generic_counter:uut_counter|Add0~97
C1L98_adder_eqn = ( C1_count_sig[3] ) + ( GND ) + ( C1L103 );
C1L98 = SUM(C1L98_adder_eqn);

--C1L99 is generic_counter:uut_counter|Add0~98
C1L99_adder_eqn = ( C1_count_sig[3] ) + ( GND ) + ( C1L103 );
C1L99 = CARRY(C1L99_adder_eqn);


--C1L102 is generic_counter:uut_counter|Add0~101
C1L102_adder_eqn = ( C1_count_sig[2] ) + ( GND ) + ( C1L3 );
C1L102 = SUM(C1L102_adder_eqn);

--C1L103 is generic_counter:uut_counter|Add0~102
C1L103_adder_eqn = ( C1_count_sig[2] ) + ( GND ) + ( C1L3 );
C1L103 = CARRY(C1L103_adder_eqn);


--ssd_out[0] is ssd_out[0]
ssd_out[0] = OUTPUT(D1L8);


--ssd_out[1] is ssd_out[1]
ssd_out[1] = OUTPUT(D1L7);


--ssd_out[2] is ssd_out[2]
ssd_out[2] = OUTPUT(D1L6);


--ssd_out[3] is ssd_out[3]
ssd_out[3] = OUTPUT(D1L5);


--ssd_out[4] is ssd_out[4]
ssd_out[4] = OUTPUT(D1L4);


--ssd_out[5] is ssd_out[5]
ssd_out[5] = OUTPUT(D1L3);


--ssd_out[6] is ssd_out[6]
ssd_out[6] = OUTPUT(D1L2);


--sum_sig_signal[0] is sum_sig_signal[0]
--register power-up is low

sum_sig_signal[0] = DFFEAS(B1_sum[0], clk, reset,  , C1_output,  ,  ,  ,  );


--sum_sig_signal[1] is sum_sig_signal[1]
--register power-up is low

sum_sig_signal[1] = DFFEAS(B1_sum[1], clk, reset,  , C1_output,  ,  ,  ,  );


--sum_sig_signal[2] is sum_sig_signal[2]
--register power-up is low

sum_sig_signal[2] = DFFEAS(B1_sum[2], clk, reset,  , C1_output,  ,  ,  ,  );


--sum_sig_signal[3] is sum_sig_signal[3]
--register power-up is low

sum_sig_signal[3] = DFFEAS(B1_sum[3], clk, reset,  , C1_output,  ,  ,  ,  );


--D1L8 is seven_seg:uut_seven_seg|Mux6~0
D1L8 = (!sum_sig_signal[1] & (!sum_sig_signal[2] $ (((!sum_sig_signal[0]) # (sum_sig_signal[3]))))) # (sum_sig_signal[1] & (((sum_sig_signal[3]))));


--D1L7 is seven_seg:uut_seven_seg|Mux5~0
D1L7 = (!sum_sig_signal[2] & (((sum_sig_signal[1] & sum_sig_signal[3])))) # (sum_sig_signal[2] & ((!sum_sig_signal[0] $ (!sum_sig_signal[1])) # (sum_sig_signal[3])));


--D1L6 is seven_seg:uut_seven_seg|Mux4~0
D1L6 = (!sum_sig_signal[2] & (sum_sig_signal[1] & ((!sum_sig_signal[0]) # (sum_sig_signal[3])))) # (sum_sig_signal[2] & (((sum_sig_signal[3]))));


--D1L5 is seven_seg:uut_seven_seg|Mux3~0
D1L5 = (!sum_sig_signal[1] & (!sum_sig_signal[2] $ (((!sum_sig_signal[0]) # (sum_sig_signal[3]))))) # (sum_sig_signal[1] & (((sum_sig_signal[0] & sum_sig_signal[2])) # (sum_sig_signal[3])));


--D1L4 is seven_seg:uut_seven_seg|Mux2~0
D1L4 = ((!sum_sig_signal[1] & (sum_sig_signal[2])) # (sum_sig_signal[1] & ((sum_sig_signal[3])))) # (sum_sig_signal[0]);


--D1L3 is seven_seg:uut_seven_seg|Mux1~0
D1L3 = (!sum_sig_signal[0] & ((!sum_sig_signal[2] & (sum_sig_signal[1])) # (sum_sig_signal[2] & ((sum_sig_signal[3]))))) # (sum_sig_signal[0] & ((!sum_sig_signal[2] $ (sum_sig_signal[3])) # (sum_sig_signal[1])));


--D1L1 is seven_seg:uut_seven_seg|Mux0~0
D1L1 = (!sum_sig_signal[1] & ((!sum_sig_signal[2] $ (!sum_sig_signal[3])))) # (sum_sig_signal[1] & (!sum_sig_signal[3] & ((!sum_sig_signal[0]) # (!sum_sig_signal[2]))));


--clk is clk
clk = INPUT();


--reset is reset
reset = INPUT();


--C1_output is generic_counter:uut_counter|output
--register power-up is low

C1_output = DFFEAS(C1L136, clk, reset,  ,  ,  ,  ,  ,  );


--input[0] is input[0]
input[0] = INPUT();


--C1L132 is generic_counter:uut_counter|Equal0~0
C1L132 = ( C1_count_sig[21] & ( C1_count_sig[20] & ( (C1_count_sig[25] & (!C1_count_sig[24] & (C1_count_sig[23] & C1_count_sig[22]))) ) ) );


--C1L133 is generic_counter:uut_counter|Equal0~1
C1L133 = ( C1_count_sig[15] & ( C1_count_sig[14] & ( (C1_count_sig[19] & (!C1_count_sig[18] & (C1_count_sig[17] & !C1_count_sig[16]))) ) ) );


--C1L134 is generic_counter:uut_counter|Equal0~2
C1L134 = ( !C1_count_sig[9] & ( !C1_count_sig[8] & ( (C1_count_sig[13] & (C1_count_sig[12] & (!C1_count_sig[11] & !C1_count_sig[10]))) ) ) );


--C1L135 is generic_counter:uut_counter|Equal0~3
C1L135 = ( !C1_count_sig[3] & ( !C1_count_sig[2] & ( (C1_count_sig[7] & (!C1_count_sig[6] & (!C1_count_sig[5] & !C1_count_sig[4]))) ) ) );


--C1L136 is generic_counter:uut_counter|Equal0~4
C1L136 = ( C1L134 & ( C1L135 & ( (!C1_count_sig[1] & (!C1_count_sig[0] & (C1L132 & C1L133))) ) ) );


--input[1] is input[1]
input[1] = INPUT();


--input[2] is input[2]
input[2] = INPUT();


--input[3] is input[3]
input[3] = INPUT();


--D1L2 is seven_seg:uut_seven_seg|Mux0~0_wirecell
D1L2 = !D1L1;


